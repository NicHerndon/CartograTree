<?php

/**
 * @file
 * Custom functionality for the CartograTree application.
 */
define("CARTOGRATREE_COMPATIBLE_MAJOR_VERSION", '4');

/**
 * Implements hook_libraries_info().
 * Define OpenLayers3 as external library.
 */
function cartogratree_libraries_info() {
    // Expected to be extracted into 'sites/all/libraries/openlayers'.
    $libraries = array();
    $libraries['openlayers'] = array(
      'name' => 'OpenLayers',
      'vendor url' => 'http://openlayers.org',
      'download url' => 'https://openlayers.org/en/v4.1.1',
      'version' => '4.1.1',
      'version arguments' => array(
        // file where version can be found
        'file' => 'ol.js',
        // Version: v4.1.1
        'pattern' => '/Version: v([0-9\.]+)/',
        'lines' => 5,
      ),
      'files' => array(
        'js' => array(
          // https://openlayers.org/en/v4.1.1/build/ol.js
          'ol.js',
        ),
        'css' => array(
          // https://openlayers.org/en/v4.1.1/css/ol.css
          'ol.css',
        ),
      ),
    );
    return $libraries;
}

/**
 * Implements hook_menu().
 * Register paths in order to define how URL requests are handled.
 */
function cartogratree_menu() {
    $items = array();

    // User interface
    $items['cartogratree'] = array(
      'description' => 'Main UI of CartograTree.',
      'title' => 'CartograTree',
      'access arguments' => array('use cartogratree'),
    );

    $items['cartogratree_data_collection'] = array(
      'description' => 'CartograTree: prepare data collection.',
      'title' => 'CartograTree data collection',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('cartogratree_data_collection_form'),
      'access arguments' => array('cartogratree analysis'),
    );

    // ADMINISTRATION.
    // List servers and layers.
    $items['admin/cartogratree/settings'] = array(
      'title' => 'CartograTree',
      'description' => 'Provides a form so users can manage GIS server settings, and layers.',
      'page callback' => 'cartogratree_admin_list',
      'page arguments' => array(),
      'access arguments' => array('administer cartogratree'),
      'file' => 'includes/cartogratree.admin.inc',
    );

    // ==============================================================================================================
    // -- Add servers.
    $items['admin/cartogratree/settings/servers/add'] = array(
      'title' => 'Add CartograTree Servers',
      'description' => 'Provide servers used by the CartograTree application.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('cartogratree_admin_settings_servers_form', 'add'),
      'access arguments' => array('administer cartogratree'),
      'file' => 'includes/cartogratree.admin.inc',
      'type' => MENU_CALLBACK,
    );

    // -- Edit servers.
    $items['admin/cartogratree/settings/servers/edit'] = array(
      'title' => 'Update CartograTree Servers',
      'description' => 'Update servers used by the CartograTree application.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('cartogratree_admin_settings_servers_form', 'edit'),
      'access arguments' => array('administer cartogratree'),
      'file' => 'includes/cartogratree.admin.inc',
    );

    // ==============================================================================================================
    // -- Add group.
    $items['admin/cartogratree/settings/group/add'] = array(
      'title' => 'Add CartograTree groups for layers',
      'description' => 'Make a group available to the CartograTree application.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('cartogratree_admin_settings_group_form', 'add'),
      'access arguments' => array('administer cartogratree'),
      'file' => 'includes/cartogratree.admin.inc',
    );

    // -- Edit group.
    $items['admin/cartogratree/settings/group/edit'] = array(
      'title' => 'Edit CartograTree group',
      'description' => 'Edit an existing CartograTree group.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('cartogratree_admin_settings_group_form', 'edit'),
      'access arguments' => array('administer cartogratree'),
      'file' => 'includes/cartogratree.admin.inc',
    );

    // -- Delete group.
    $items['admin/cartogratree/settings/group/delete'] = array(
      'title' => 'Delete CartograTree group',
      'description' => 'Delete an existing CartograTree group.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('cartogratree_admin_settings_group_form', 'delete'),
      'access arguments' => array('administer cartogratree'),
      'file' => 'includes/cartogratree.admin.inc',
    );

    // -- Add subgroups
    $items['admin/cartogratree/settings/group/%/subgroups'] = array(
      'title' => 'Group management',
      'description' => 'Add or remove sublayers to a group.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('cartogratree_admin_group_management_form', 4),
      'access arguments' => array('administer cartogratree'),
      'file' => 'includes/cartogratree.admin.inc',
    );

    // -- Remove subgroup (no confirm)
    $items['admin/cartogratree/settings/group/%/remove-subgroup/%'] = array(
      'title' => 'Remove subgroup from group',
      'description' => 'Handle subgroup membership for a group.',
      'page callback' => 'cartogratree_admin_group_remove_subgroup',
      'page arguments' => array(4, 6),
      'access arguments' => array('administer cartogratree'),
      'file' => 'includes/cartogratree.admin.inc',
    );

    // ==============================================================================================================
    // -- Add subgroup.
    $items['admin/cartogratree/settings/subgroup/add'] = array(
      'title' => 'Add CartograTree subgroup for layers',
      'description' => 'Make a subgroup available to the CartograTree application.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('cartogratree_admin_settings_subgroup_form', 'add'),
      'access arguments' => array('administer cartogratree'),
      'file' => 'includes/cartogratree.admin.inc',
    );

    // -- Edit subgroup.
    $items['admin/cartogratree/settings/subgroup/edit'] = array(
      'title' => 'Edit CartograTree subgroup',
      'description' => 'Edit an existing CartograTree subgroup.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('cartogratree_admin_settings_subgroup_form', 'edit'),
      'access arguments' => array('administer cartogratree'),
      'file' => 'includes/cartogratree.admin.inc',
    );

    // -- Delete subgroup.
    $items['admin/cartogratree/settings/subgroup/delete'] = array(
      'title' => 'Delete CartograTree subgroup',
      'description' => 'Delete an existing CartograTree subgroup.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('cartogratree_admin_settings_subgroup_form', 'delete'),
      'access arguments' => array('administer cartogratree'),
      'file' => 'includes/cartogratree.admin.inc',
    );

    // ==============================================================================================================
    // -- Add layer.
    $items['admin/cartogratree/settings/layer/add'] = array(
      'title' => 'Add CartograTree layer',
      'description' => 'Make a layer available to the CartograTree application.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('cartogratree_admin_settings_layer_form', 'add'),
      'access arguments' => array('administer cartogratree'),
      'file' => 'includes/cartogratree.admin.inc',
    );

    // -- Edit layer.
    $items['admin/cartogratree/settings/layer/edit'] = array(
      'title' => 'Edit CartograTree layer',
      'description' => 'Edit an existing CartograTree layer.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('cartogratree_admin_settings_layer_form', 'edit'),
      'access arguments' => array('administer cartogratree'),
      'file' => 'includes/cartogratree.admin.inc',
    );

    // -- Delete layer.
    $items['admin/cartogratree/settings/layer/delete'] = array(
      'title' => 'Delete CartograTree layer',
      'description' => 'Delete an existing CartograTree layer.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('cartogratree_admin_settings_layer_form', 'delete'),
      'access arguments' => array('administer cartogratree'),
      'file' => 'includes/cartogratree.admin.inc',
    );

    // ==============================================================================================================
    // Management of layers' access.
    // -- Add permissions
    $items['admin/cartogratree/settings/layer/access'] = array(
      'title' => 'Layer Permissions',
      'description' => 'Handle permissions for a layer.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('cartogratree_admin_layer_permissions_form', 5),
      'access arguments' => array('administer cartogratree'),
      'file' => 'includes/cartogratree.admin.inc',
    );

    // -- Remove (no confirm)
    $items['admin/cartogratree/settings/layer/access/%/%/%'] = array(
      'title' => 'Remove Layer Permissions',
      'description' => 'Handle permissions for a layer.',
      'page callback' => 'cartogratree_admin_layer_permission_remove_callback',
      'page arguments' => array(5, 6, 7),
      'access arguments' => array('administer cartogratree'),
      'file' => 'includes/cartogratree.admin.inc',
    );

    // ==============================================================================================================
    // -- Add field.
    $items['admin/cartogratree/settings/layer/%/field/add'] = array(
      'title' => 'Add CartograTree field',
      'description' => 'Make a field available to the CartograTree application.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('cartogratree_admin_settings_field_form', 4, 'add'),
      'access arguments' => array('administer cartogratree'),
      'file' => 'includes/cartogratree.admin.inc',
    );

    // -- Edit field.
    $items['admin/cartogratree/settings/layer/%/field/edit'] = array(
      'title' => 'Edit CartograTree field',
      'description' => 'Edit an existing CartograTree field.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('cartogratree_admin_settings_field_form', 4, 'edit'),
      'access arguments' => array('administer cartogratree'),
      'file' => 'includes/cartogratree.admin.inc',
    );

    // -- Delete field.
    $items['admin/cartogratree/settings/layer/%/field/delete'] = array(
      'title' => 'Delete CartograTree field',
      'description' => 'Delete an existing CartograTree field.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('cartogratree_admin_settings_field_form', 4, 'delete'),
      'access arguments' => array('administer cartogratree'),
      'file' => 'includes/cartogratree.admin.inc',
    );

    // -- Get environmental values.
    $items['admin/cartogratree/settings/get_environmental_values'] = array(
      'title' => 'Get environmental values for CartograTree',
      'description' => 'Uses GeoServer WMS to get environmental values from one layer for all geo-referenced trees.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('cartogratree_admin_get_environmental_values', 4),
      'access arguments' => array('administer cartogratree'),
      'file' => 'includes/cartogratree.admin.inc',
    );

    return $items;
}

/**
 * Implements hook_theme().
 * Specify how to render the arrays for both permissions tables on
 * ?q=admin/cartogratree/settings/layer/access/<layer id> as HTML;
 * and sub/group management tables on
 * ?q=admin/cartogratree/settings/group/subgroups/<group id>, and
 * ?q=admin/cartogratree/settings/subgroups/group/<subgroup id>
 * as well as the CartograTree app page ?q=cartogratree.
 */
function cartogratree_theme($existing, $type, $theme, $path) {
    $items = array();

    $items['cartogratree_admin_form_permission_table'] = array(
      'function' => 'cartogratree_admin_form_permission_table',
      'render element' => 'element',
      'file' => 'includes/cartogratree.admin.inc',
    );
    $items['cartogratree_admin_form_group_mgmt_table'] = array(
      'function' => 'cartogratree_admin_form_group_mgmt_table',
      'render element' => 'element',
      'file' => 'includes/cartogratree.admin.inc',
    );
    $items['page__cartogratree'] = array(
      'path' => $path . "/theme",
      'template' => 'templates/page--cartogratree',
      'render element' => 'page',
//      'file' => 'cartogratree_theme.inc',   // this works only ONCE after clearing the cache
    );

    return $items;
}

/*
 * Implements template_preprocess_page().
 */
function cartogratree_preprocess_page(&$variables) {
    if (current_path() == 'cartogratree') {
        global $user;
        // Grab the roles and user id of the current user.
        $uid = $user->uid;
        $rids = is_array($user->roles) ? array_keys($user->roles) : array();

        // get or set session_id
        $session = array();
        parse_str($_SERVER['QUERY_STRING'], $query_string);
        if (isset($query_string['session_id'])) {
            $records = db_query('
                SELECT *
                FROM {cartogratree_sessions}
                WHERE session_id=:session_id
                ORDER BY id', array(':session_id' => $query_string['session_id']));
            $ids = array();
            foreach ($records as $r) {
                array_push($ids, array('id' => $r->id, 'op_type' => $r->operation_type));
            }
            if(count($ids) > 0) {   // session_id exists in database
                // write session to database
                $record = array(
                  'session_id' => $query_string['session_id'],
                  'operation_type' => 1,    // read
                  'operation_timestamp' => date('Y-m-d H:i:s'),
                  'remote_addr' => $_SERVER['REMOTE_ADDR'],
                  'http_user_agent' => $_SERVER['HTTP_USER_AGENT'],
                  'uid' => $uid,
                  'rid' => "'" . implode(',', $rids) . "'",
                );
                drupal_write_record('cartogratree_sessions', $record);
                // get session details to pass to JS - check user permissions
                $id = 'none';
                foreach($ids as $key => $val) {
                    if ($val['op_type'] == 2) { // details (layers, filters, records) for session_id were written to database
                        $id = $val['id'];
                    }
                }
                $session_id = $query_string['session_id'];
                $session['id'] = $session_id;
                if($id != 'none') {
                    // layers
                    $records = db_query('
                        SELECT *
                        FROM {cartogratree_session_layers}
                        WHERE id=:id
                        ORDER BY layer_id', array(':id' => $id));
                    $layers = array();
                    foreach ($records as $r) {
                        array_push($layers, $r->layer_id);
                    }
                    $session['layers'] = $layers;
                    // filters
                    $records = db_query('
                        SELECT *
                        FROM {cartogratree_session_filters}
                        WHERE id=:id
                        ORDER BY layer_id, filter_id', array(':id' => $id));
                    $filters = array();
                    foreach ($records as $r) {
                        array_push($filters, array($r->filter_id => $r->layer_id));
                    }
                    $session['filters'] = $filters;
                }
            }
            else {          // session_id does not exist in database
                $path = explode('/', $_SERVER['REQUEST_URI']);
                $path[count($path) - 1] = 'cartogratree_invalid_session_id';
                $location = $_SERVER['REQUEST_SCHEME'] . '://' . $_SERVER['HTTP_HOST'] . implode('/', $path);
                header('Location: ' . $location);
                exit();
                // add redirect in Drupal back to cartogratree
            }
        }
        else {  // create session_id, record in database, and redirect user to URL with session_id
            $date = date('Y-m-d H:i:s');
            $session_id = md5($date . rand(0,99));
            // write session to database
            $record = array(
              'session_id' => $session_id,
              'operation_type' => 0,    // insert
              'operation_timestamp' => $date,
              'remote_addr' => $_SERVER['REMOTE_ADDR'],
              'http_user_agent' => $_SERVER['HTTP_USER_AGENT'],
              'uid' => $uid,
              'rid' => "'" . implode(',', $rids) . "'",
            );
            drupal_write_record('cartogratree_sessions', $record);
            // redirect client to updated URL
            $location = $_SERVER['REQUEST_SCHEME'] . '://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'] . '?session_id=' . $session_id;
            header('Location: ' . $location);
            exit();
        }
        
        // Only grab layers that the current user has permission to see.
        $records = db_query('
            SELECT l.layer_id, l.title, l.name, l.url, l.layer_rank, l.trees_layer, l.layer_type, g.group_name, s.subgroup_name, g.group_rank, gs.subgroup_rank
            FROM {cartogratree_layer_permissions} p
            JOIN {cartogratree_layers} l ON l.layer_id=p.layer_id
            JOIN {cartogratree_groups} g ON g.group_id = l.group_id
            JOIN {cartogratree_subgroups} s ON s.subgroup_id = l.subgroup_id
            JOIN {cartogratree_groups_subgroups} gs ON g.group_id = gs.group_id AND s.subgroup_id = gs.subgroup_id
            WHERE p.uid=:uid OR p.rid IN (:rids)
            ORDER BY g.group_rank, gs.subgroup_rank, l.layer_rank', array(':uid' => $uid, ':rids' => $rids));
        $groups = array(); $layers = array(); $layer_ids = array();
        foreach ($records as $record) {
            $groups[$record->group_rank]['group_name'] = $record->group_name;
            $groups[$record->group_rank]['group_rank'] = $record->group_rank;
            if ($record->subgroup_name != '[No subgroup]') {
                $groups[$record->group_rank]['has_subgroups'] = TRUE;
            }
            else {
                $groups[$record->group_rank]['has_subgroups'] = FALSE;
            }
            $groups[$record->group_rank]['subgroups'][$record->subgroup_rank]['subgroup_name'] = $record->subgroup_name;
            $groups[$record->group_rank]['subgroups'][$record->subgroup_rank]['layers'][$record->layer_id]['layer_id'] = $record->layer_id;
            $groups[$record->group_rank]['subgroups'][$record->subgroup_rank]['layers'][$record->layer_id]['layer_title'] = $record->title;
            $groups[$record->group_rank]['subgroups'][$record->subgroup_rank]['layers'][$record->layer_id]['layer_name'] = $record->name;
            $groups[$record->group_rank]['subgroups'][$record->subgroup_rank]['layers'][$record->layer_id]['layer_url'] = $record->url;
//        $groups[$record->group_rank]['subgroups'][$record->subgroup_rank]['layers'][$record->layer_id]['layer_rank'] = $record->layer_rank;
            $groups[$record->group_rank]['subgroups'][$record->subgroup_rank]['layers'][$record->layer_id]['trees_layer'] = $record->trees_layer;
            $groups[$record->group_rank]['subgroups'][$record->subgroup_rank]['layers'][$record->layer_id]['layer_type'] = $record->layer_type;
            $layers["cartogratree_layer_" . $record->layer_id]['layer_id'] = $record->layer_id;
            $layers["cartogratree_layer_" . $record->layer_id]['name'] = $record->name;
            $layers["cartogratree_layer_" . $record->layer_id]['title'] = $record->title;
            $layers["cartogratree_layer_" . $record->layer_id]['url'] = $record->url;
            $layers["cartogratree_layer_" . $record->layer_id]['trees_layer'] = $record->trees_layer;
            $layers["cartogratree_layer_" . $record->layer_id]['layer_type'] = $record->layer_type;
            $layers["cartogratree_layer_" . $record->layer_id]['filters'] = 0;
            array_push($layer_ids, $record->layer_id);
        }
        $variables['cartogratree_layers'] = $groups;

        $fields = array();
        $records = db_query('
            SELECT f.*, l.title, l.name
            FROM {cartogratree_fields} f
            JOIN {cartogratree_layers} l ON l.layer_id=f.layer_id
            WHERE f.layer_id in (:ids)', array(':ids' => $layer_ids));
        foreach ($records as $record) {
            //$fields['Machine name for the layer']['Field name returned by layer'] = $record->name;
            $fields[$record->name]['Human-readable name for the layer'] = $record->title;
            $fields[$record->name]['Layer ID'] = $record->layer_id;

            $fields[$record->name][$record->field_name]['Field ID'] = $record->field_id;
            $fields[$record->name][$record->field_name]['Field name shown to user'] = $record->display_name;
            $fields[$record->name][$record->field_name]['Filter data by this field'] = $record->filter;
            $fields[$record->name][$record->field_name]['Type of filter'] = $record->filter_type;
            $fields[$record->name][$record->field_name]['Values'] = $record->field_values;
            $fields[$record->name][$record->field_name]['Precision used with range values'] = $record->precision;
            $fields[$record->name][$record->field_name]['Value returned by layer that should be masked'] = $record->mask_value;
            $fields[$record->name][$record->field_name]['Text shown to user for masked values'] = $record->mask_display;
            $fields[$record->name][$record->field_name]['Show this field in maps pop-up'] = $record->pop_up;
            $fields[$record->name][$record->field_name]['Show this field in data table'] = $record->data_table;
            if ($record->filter == '1') { $layers["cartogratree_layer_" . $record->layer_id]['filters']++; }
        }
        
        libraries_load('openlayers');
        foreach (['dialog', 'tabs', 'accordion', 'button', 'slider'] as $ui) {
            drupal_add_library('system', 'ui.' . $ui);
        }
        drupal_add_js(drupal_get_path('module', 'cartogratree') . '/cartogratree.js');
        drupal_add_css(drupal_get_path('module', 'cartogratree') . '/cartogratree.css');

        $settings = array(
          'cartogratree' => array(
            'gis' => variable_get('cartogratree_gis'),
            'api' => variable_get('cartogratree_api'),
          ),
          'layers' => $layers,
          'fields' => $fields,
          'session' => $session,
        );
        drupal_add_js($settings, 'setting');
    }
}

/*
 * Implements hook_permission().
 */
function cartogratree_permission() {
    // Go to admin/people/permissions to manage permissions
    return array(
      'administer cartogratree' => array(
        'title' => t('Administer CartograTree'),
        'description' => t('Perform administration tasks for CartograTree.'),
      ),
      'use cartogratree' => array(
        'title' => t('Use CartograTree'),
        'description' => t('Use the CartograTree application.'),
      ),
      'cartogratree analysis' => array(
        'title' => t('CartograTree Analysis'),
        'description' => t('Analyze data with CartograTree.'),
      ),
    );
}

/**
 * Prepare data collection to upload to Galaxy.
 * URL suffix: ?q=cartogratree_data_collection
 */
function cartogratree_data_collection_form($form, &$form_state) {
    global $user;
    // Grab the user id of the current user.
    $uid = $user->uid;
    // Only grab galaxy instances the current user has created.
    $records = db_query('SELECT url, api_key, servername
        FROM {tripal_galaxy}
        WHERE uid=:uid', array(':uid' => $uid));
    $server_options = array(); $history_options = array();
    $cmd = ''; $display_results = 'test';
    foreach ($records as $r) {
        $server_options[$r->url . ',' . $r->api_key] = $r->servername;
        // get list of Galaxy history entries
        $cmd = realpath('.') . '/' . drupal_get_path('module', 'cartogratree') . '/includes/galaxy_api/display.py ' . $r->api_key . ' ' .$r->url . '/galaxy/api/histories';
        $display_results = `python $cmd`;
        // parse result
        $lines = explode(PHP_EOL, $display_results);
        $history = ''; $histories = array();
        foreach ($lines as $line) {
            if (preg_match('/#\d+:\s(.*)/', $line, $matches)) {
                $history = $matches[1];
                $histories[$history]['url'] = $matches[1];
            }
            else if (preg_match('/\s+name:\s(.*)/', $line, $matches)) {
                $histories[$history]['name'] = $matches[1];
            }
            else if (preg_match('/\s+id:\s(.*)/', $line, $matches)) {
                $histories[$history]['id'] = $matches[1];
            }
            else if (preg_match('/\s+deleted:\s(.*)/', $line, $matches)) {
                $histories[$history]['deleted'] = $matches[1];
            }
        }
        // add histories to $history_options
        foreach ($histories as $history) {
            if ($history['deleted'] == 'False') {
                $history_options[$r->servername][$history['id']] = $history['name'];
            }
        }
    }
    $form['galaxy_server'] = array(
      '#type' => 'select',
      '#title' => 'Galaxy server',
      '#options' => $server_options,
      '#description' => count($server_options) ? '' : 'Set up a Galaxy instance at admin/tripal/extension/galaxy.',
      '#required' => TRUE,
    );
    $form['galaxy_history'] = array(
      '#type' => 'select',
      '#title' => 'Galaxy history',
      '#options' => $history_options,
      '#description' => count($history_options) ? '' : 'Create and save a history in your Galaxy account.',
      '#required' => TRUE,
    );

    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Send data to Galaxy'),
    );
    
    $ids = (isset($_POST['cartogratree_data_collection_individual_ids']))
        ? $_POST['cartogratree_data_collection_individual_ids']
        : "''";

    $form['ids'] = array(
      '#type' => 'hidden',
      '#value' => $ids,
    );
    
//    $form['layer_ids'] = array(
//      '#type' => 'hidden',
//      '#value' => (isset($_POST['cartogratree_data_collection_layer_ids'])) ? $_POST['cartogratree_data_collection_layer_ids'] : 'a',
//    );
//
//    $form['collection_name'] = array(
//      '#type' => 'textfield',
//      '#title' => 'Collection name',
//      '#description' => 'Unique name to identify this data set in Galaxy.',
//    );
//
//    $form['collection_description'] = array(
//      '#type' => 'textfield',
//      '#title' => 'Collection description',
//      '#description' => 'Description for this data collection.',
//    );
        
    $header = array(
      'uniquename' => array('data' => t('Tree ID'), 'field' => 'n.uniquename', 'sort' => 'asc'),
      'genus' => array('data' => t('Genus'), 'field' => 'n.genus'),
      'species' => array('data' => t('Species'), 'field' => 'n.species'),
      'subkingdom' => array('data' => t('Sub-kingdom'), 'field' => 'n.subkingdom'),
      'family' => array('data' => t('Family'), 'field' => 'n.family'),
      'latitude' => array('data' => t('Latitude'), 'field' => 'n.latitude'),
      'longitude' => array('data' => t('Longitude'), 'field' => 'n.longitude'),
      'coordinate_type' => array('data' => t('Coordinate type'), 'field' => 'n.coordinate_type'),
    );
//    $results = db_query("select * from {chado.ct_view} where uniquename in (:ids)", array(':ids' => $_POST['cartogratree_data_collection_individual_ids']));
//    $results = db_query("select * from {chado.ct_view} where uniquename in (:ids)", array(':ids' => $ids));
    $results = db_query('select * from {chado.ct_view} where uniquename in (' . $ids . ')');
//    $results = db_select('chado.ct_view', 'v')
//        ->extend('PagerDefault')
//        ->fields('v')
//        ->condition('uniquename', explode(',', $_POST['cartogratree_data_collection_individual_ids']), 'IN')
//        ->limit(25)
//        ->execute();
    $options = array();
    foreach ($results as $r) {
        $options[$r->uniquename] = array(
            'uniquename' => $r->uniquename,
            'genus' => $r->genus,
            'species' => $r->species,
            'subkingdom' => $r->subkingdom,
            'family' => $r->family,
            'latitude' => $r->latitude,
            'longitude' => $r->longitude,
            'coordinate_type' => $r->coordinate_type,
        );
    }
    $form['table'] = array(
      '#type' => 'tableselect',
      '#header' => $header,
      '#options' => $options,
      '#emtpy' => t('No trees selected.'),
      '#attributes' => array('width' => '100%'),
    );

    return $form;
}

function cartogratree_data_collection_form_validate($form, &$form_state) {
//    dpm($form_state);
    if(!isset($form_state['input']['ids'])) {
        form_set_error('ids', 'No IDs passed!');        
    }

    $db_ids = array();
    $results = db_query('select uniquename from {chado.ct_view}');
    foreach ($results as $r) {
        array_push($db_ids, "'" . $r->uniquename . "'");
    }
    if (count(array_diff(explode(',', $form_state['input']['ids']), $db_ids))) {
        form_set_error('ids', 'Invalid IDs passed!');
    }
}

/**
 * Prepare data collection to upload to Galaxy: Submission.
 * URL suffix: ?q=cartogratree_data_collection
 */
function cartogratree_data_collection_form_submit($form, &$form_state) {
    // create file(s)
    global $user;
    $file_name = realpath('.') . '/' . date('Ymd_') . $user->uid . '_snps.tsv';
    $data = str_replace("'", '', explode(',', $form_state['input']['ids']));
    $file = file_put_contents($file_name, $data);
    // upload file(s) to selected history
    $galaxy = explode (',', $form_state['values']['galaxy_server']);
    $cmd = realpath('.') . '/' . drupal_get_path('module', 'cartogratree') . '/includes/galaxy_api/upload_to_history.py ' . $galaxy[1] . ' ' .$galaxy[0] . '/galaxy ' . $form_state['values']['galaxy_history'] . ' ' . $file_name;
    `python $cmd`;
    // redirect user to galaxy instance
    $form_state['redirect'] = $galaxy[0];

}

<?php

/**
 * @file
 * CartograTree installation
 */

/**
 * Implements hook_requirements().
 * Check installation requirements (i.e., OpenLayers3 files are in 'sites/all/libraries/openlayers'.
 */
function cartogratree_requirements($phase) {
    $requirements = array();
    // Ensure translations don't break at install time
    $t = get_t();

    // Check to see if the OpenLayers library is available for CartograTree
    if ($phase == 'runtime') {
        $library = libraries_detect('openlayers');

        if ($library['installed']) {
            $version = explode('.', $library['version']);

            if ($version[0] == CARTOGRATREE_COMPATIBLE_MAJOR_VERSION) {
                $requirements['cartogratree'] = array(
                  'value' => $library['version'],
                  'severity' => REQUIREMENT_OK,
                );
            }
            else {
                $requirements['cartogratree'] = array(
                  'value' => $library['version'],
                  'description' => $t('Incompatible version detected. The OpenLayers library version for CartograTree must be from the %version.x branch.', array('%version' => CARTOGRATREE_COMPATIBLE_MAJOR_VERSION)),
                  'severity' => REQUIREMENT_WARNING,
                );
            }
        }
        else {
            $requirements['cartogratree'] = array(
              'value' => $t('OpenLayers library for CartograTree not found.'),
              'description' => $t('The OpenLayers library for CartograTree could not be detected. Please consult the README.md for installation instructions.'),
              'severity' => REQUIREMENT_ERROR,
            );
        }

        $requirements['cartogratree']['title'] = $t('CartograTree');
    }

    return $requirements;
}

/**
 * Implements hook_schema().
 * Define the two tables used by CartograTree, cartogratree_layers and cartogratree_layer_permissions.
 */
function cartogratree_schema() {
    $schema = array();

    $schema['cartogratree_layers'] = array(
      'description' => 'Keeps track of layers for use with CartograTree module.',
      'fields' => array(
        'layer_id' => array(
          'description' => 'Primary Key',
          'type' => 'serial',
          'not null' => TRUE,
        ),
        'title' => array(
          'description' => 'Human-readable name for the layer.',
          'type' => 'varchar',
          'length' => 512,
        ),
        'name' => array(
          'description' => 'Machine name for the layer.',
          'type' => 'varchar',
          'length' => 256,
        ),
        'url' => array(
          'description' => 'The URL for the provider of the layer.',
          'type' => 'varchar',
          'length' => 256,
        ),
        'group_id' => array(
          'description' => 'Accordion group ID for side navigation menu.',
          'type' => 'int',
        ),
        'subgroup_id' => array(
          'description' => 'Accordion subgroup ID for side navigation menu.',
          'type' => 'int',
        ),
        'layer_rank' => array(
          'description' => 'Layer rank for side navigation menu.',
          'type' => 'int',
        ),
      ),
      'primary key' => array('layer_id'),
    );

    $schema['cartogratree_layer_permissions'] = array(
      'description' => 'Keeps track of permissions for layers.',
      'fields' => array(
        'layer_permissions_id' => array(
          'description' => 'Primary Key',
          'type' => 'serial',
          'not null' => TRUE,
        ),
        'layer_id' => array(
          'description' => 'Links to the layers table.',
          'type' => 'int',
          'not null' => TRUE,
        ),
        'rid' => array(
          'description' => 'The ROLE ID of a role to provide access to.',
          'type' => 'int',
        ),
        'uid' => array(
          'description' => 'The USER ID of a user to provide access to.',
          'type' => 'int',
        ),
      ),
      'primary key' => array('layer_permissions_id'),
    );

    $schema['cartogratree_groups'] = array(
      'description' => 'Keeps track of accordion groups for side navigation menu.',
      'fields' => array(
        'group_id' => array(
          'description' => 'Primary Key',
          'type' => 'serial',
          'not null' => TRUE,
        ),
        'group_name' => array(
          'description' => 'Accordion group name for side navigation menu.',
          'type' => 'varchar',
          'length' => 256,
        ),
        'group_rank' => array(
          'description' => 'Group rank for side navigation menu.',
          'type' => 'int',
        ),
      ),
      'primary key' => array('group_id'),
    );

    $schema['cartogratree_subgroups'] = array(
      'description' => 'Keeps track of accordion subgroups for side navigation menu.',
      'fields' => array(
        'subgroup_id' => array(
          'description' => 'Primary Key',
          'type' => 'serial',
          'not null' => TRUE,
        ),
        'subgroup_name' => array(
          'description' => 'Accordion subgroup name for side navigation menu.',
          'type' => 'varchar',
          'length' => 256,
        ),
      ),
      'primary key' => array('subgroup_id'),
    );

    $schema['cartogratree_groups_subgroups'] = array(
      'description' => 'Keeps track of accordion hierarchy for side navigation menu.',
      'fields' => array(
        'group_id' => array(
          'description' => 'FK from cartogratree_groups',
          'type' => 'int',
          'not null' => TRUE,
        ),
        'subgroup_id' => array(
          'description' => 'FK from cartogratree_subgroups',
          'type' => 'int',
          'not null' => TRUE,
        ),
        'subgroup_rank' => array(
          'description' => 'Subgroup rank for side navigation menu.',
          'type' => 'int',
        ),
      ),
      'primary key' => array('group_id', 'subgroup_id', 'subgroup_rank'),
    );

    $schema['cartogratree_fields'] = array(
      'description' => 'Keeps track of fields to filter by, display in pop-up, and display in table for each layer.',
      'fields' => array(
        'field_id' => array(
          'description' => 'Primary Key',
          'type' => 'serial',
          'not null' => TRUE,
        ),
        'layer_id' => array(
          'description' => 'Parent layer of this field.', // FK from cartogratree_layers
          'type' => 'int',
        ),
        'field_name' => array(
          'description' => 'Name returned by layer.',
          'type' => 'varchar',
          'length' => 256,
        ),
        'display_name' => array(
          'description' => 'Name shown to user.',
          'type' => 'varchar',
          'length' => 256,
        ),
        'filter' => array(
          'description' => 'Allow users to filter data by this field (1), or not (0).',
          'type' => 'int',
          'default' => 0,
        ),
        'filter_type' => array(
          'description' => 'Type of filter to use with this field: radio-button, checkbox, slider, or elastic search (radio, check, slider, or elastic, respectively).',
          'type' => 'varchar',
          'length' => 10,
        ),
        'values' => array(
          'description' => 'Range for slider (e.g., 0..20), and semi-colon sperated list for radio and check.',
          'type' => 'text',
        ),
        'precision' => array(
          'description' => 'Precision used with range values.',
          'type' => 'int',
          'default' => 2,
        ),
        'mask_value' => array(
          'description' => 'Value returned by layer that should be masked.',
          'type' => 'varchar',
          'length' => 256,
        ),
        'mask_display' => array(
          'description' => 'Text shown to user for masked values.',
          'type' => 'varchar',
          'length' => 256,
        ),
        'pop_up' => array(
          'description' => 'Show this field in maps pop-up (1), or not (0).',
          'type' => 'int',
          'default' => 0,
        ),
        'data_table' => array(
          'description' => 'Show this field in data table (1), or not (0).',
          'type' => 'int',
          'default' => 0,
        ),
        'field_rank' => array(
          'description' => 'Order in which this field is shown.',
          'type' => 'int',
        ),
      ),
      'primary key' => array('field_id'),
    );

    return $schema;
}
